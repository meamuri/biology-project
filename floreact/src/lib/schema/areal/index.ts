
export enum Group {
    PLURAL = 'PLURAL',                                          // Плюразональная
    EURO_ASIA = 'EURO_ASIA',                                    // Европейско-азиатская
    EAST_EUROPE_ASIA = 'EAST_EUROPE_ASIA',                      // Восточноевропейско-азиатская
    SOUTH_EAST_EUROPE_ASIA = 'SOUTH_EAST_EUROPE_ASIA',          // Юговосточноевропейско-азитаская
    EURO_SIBERIA_MIDDLE_ASIAN = 'EURO_SIBERIA_MIDDLE_ASIAN',    // Евросибирская-среднеазиатская
    EURO_SIBERIA = 'EURO_SIBERIA',                              // Евросибирская
    EUROPEAN = 'EUROPEAN',                                      // Европейская
    ENDEMIC = 'ENDEMIC',                                        // Эндемическая
}

export function groupToLocaleName(e: Group): string {
    switch (e) {
        case Group.PLURAL:
            return 'Плюризональная'
        case Group.EURO_ASIA:
            return 'Европейско-азиатская'
        case Group.EAST_EUROPE_ASIA:
            return 'Восточноевропейско-азиатская'
        case Group.SOUTH_EAST_EUROPE_ASIA:
            return 'Юговосточноевропейско-азитаская'
        case Group.EURO_SIBERIA_MIDDLE_ASIAN:
            return 'Евросибирская-среднеазиатская'
        case Group.EURO_SIBERIA:
            return 'Евросибирская'
        case Group.EUROPEAN:
            return 'Европейская'
        case Group.ENDEMIC:
            return 'Эндемики'
    }
}

const groups: {[key in Group]: string[]} = {
    PLURAL: [
        'Голарктический',
        'Циркумбореальный',
        'Космополитный',
        'Европейско-азиатско-североамериканский',
    ],
    EURO_ASIA: [
        'Евразиатский',
        'Европейско-западноазиатский',
        'Палеарктический',
        'Южноевропейско-малоазиатский',
        'Европейско-малоазиатский',
        'Евразиатско-палеотропический',
        'Европейско-югозападно-азиатский',
        'Европейско-югозападноазиатский',
        'Евросибирско-монгольский',
    ],
    EAST_EUROPE_ASIA: [
        'Восточноевропейско-азиатский',
        'Восточноевропейско-западноазиатский',
        'Средиземноморско-восточноевропейско-среднеазиатский',
        'Восточноевропейско-кавказско-азиатский',
        'Восточноевропейско-среднеазиатский',
        'Восточноевропейско-югозападноазиатский',
    ],
    SOUTH_EAST_EUROPE_ASIA: [
        'Юго-восточноевропейско-западноазиатский',
        'Юго-восточноевропейско-азиатский',
        'Юго-восточноевропейско-среднеазиатский',
        'Юго-восточноевропейско-малоазиатский',
    ],
    EURO_SIBERIA_MIDDLE_ASIAN: [
        'Евросибирско-среднеазиатский',
        'Европейско-западносибирско-среднеазиатский',
        'Восточноевропейско-сибирско-среднеазиатский',
        'Восточноевропейско-западносибирско-среднеазиатский',
        'Юго-восточноевропейско-западносибирско-среднеазиатский',
        'Евросибирско-западноазиатский',
    ],
    EURO_SIBERIA: [
        'Евросибирский',
        'Европейско-западносибирский',
        'Восточноевропейско-западносибирский',
        'Европейско-кавказско-западносибирский',
        'Средиземноморско-евросибирский',
        'Евросибирско-средиземноморский',
    ],
    EUROPEAN: [
        'Европейский',
        'Восточноевропейский',
        'Юго-восточноевропейский',
        'Юго-восточноевропейско-кавказский',
        'Среднеевропейско-кавказский',
        'Европейско-кавказский',
        'Южно-европейский',
        'Восточноевропейско-кавказский',
        'Европейско-восточносредиземноморский',
        'Южноевропейско-средиземноморский',
        'Европейско-средиземноморский',
    ],
    ENDEMIC: [
        'Эндемичный'
    ],
}

const areals: string[] = [
    'Голарктический',
    'Циркумбореальный',
    'Космополитный',
    'Европейско-азиатско-североамериканский',

    'Евразиатский',
    'Европейско-западноазиатский',
    'Палеарктический',
    'Южноевропейско-малоазиатский',
    'Европейско-малоазиатский',
    'Евразиатско-палеотропический',
    'Европейско-югозападно-азиатский',
    'Европейско-югозападноазиатский',
    'Евросибирско-монгольский',

    'Восточноевропейско-азиатский',
    'Восточноевропейско-западноазиатский',
    'Средиземноморско-восточноевропейско-среднеазиатский',
    'Восточноевропейско-кавказско-азиатский',
    'Восточноевропейско-среднеазиатский',
    'Восточноевропейско-югозападноазиатский',

    'Юго-восточноевропейско-западноазиатский',
    'Юго-восточноевропейско-азиатский',
    'Юго-восточноевропейско-среднеазиатский',
    'Юго-восточноевропейско-малоазиатский',

    'Евросибирско-среднеазиатский',
    'Европейско-западносибирско-среднеазиатский',
    'Восточноевропейско-сибирско-среднеазиатский',
    'Восточноевропейско-западносибирско-среднеазиатский',
    'Юго-восточноевропейско-западносибирско-среднеазиатский',
    'Евросибирско-западноазиатский',

    'Евросибирский',
    'Европейско-западносибирский',
    'Восточноевропейско-западносибирский',
    'Европейско-кавказско-западносибирский',
    'Средиземноморско-евросибирский',
    'Евросибирско-средиземноморский',

    'Европейский',
    'Восточноевропейский',
    'Юго-восточноевропейский',
    'Юго-восточноевропейско-кавказский',
    'Среднеевропейско-кавказский',
    'Европейско-кавказский',
    'Южно-европейский',
    'Восточноевропейско-кавказский',
    'Европейско-восточносредиземноморский',
    'Южноевропейско-средиземноморский',
    'Европейско-средиземноморский',
]

export function getAreals0() {
    return [...areals]
}

export function getAreals(): string[] {
    return Object.values(groups).flatMap(e => e)
}

function nameToGroup(e: string): Group {
    if (e === 'PLURAL') {
        return Group.PLURAL
    } else if (e === 'EURO_ASIA') {
        return Group.EURO_ASIA
    } else if (e === 'EAST_EUROPE_ASIA') {
        return Group.EAST_EUROPE_ASIA
    } else if (e === 'SOUTH_EAST_EUROPE_ASIA') {
        return Group.SOUTH_EAST_EUROPE_ASIA
    } else if (e === 'EURO_SIBERIA_MIDDLE_ASIAN') {
        return Group.EURO_SIBERIA_MIDDLE_ASIAN
    } else if (e === 'EURO_SIBERIA') {
        return Group.EURO_SIBERIA
    } else if (e === 'EUROPEAN') {
        return Group.EUROPEAN
    } else if (e === 'ENDEMIC') {
        return Group.ENDEMIC
    }
    throw new Error("fix bug with group name")
}

export function arealToGroup(arial: string): Group | null {
    for (let [k, [...elems]] of Object.entries(groups)) {
        if (elems.find(e => e === arial)) {
            return nameToGroup(k)
        }
    }
    return null
}
